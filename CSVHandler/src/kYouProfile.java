import definitions.*;

import java.util.Random;


/**
 * Created by admin on 11/11/15.
 *
 *
 * Defines kYou operational profile
 *
 */


public class kYouProfile {

    // start operation time in the day (minutes from 00:00)
    private int startMinOfDayOperation;

    // end operation time in the day (minutes from 00:00)
    private int endMinOfDayOperation;

    // max number of events generated by kYou in a day. FOR NOW DATA GENERATION IGNORES IT
    private int maxNumberOfDailyInterventions;

    // minimum time between suggesting activites
    private int minIntervalInMin = 15;

    // on/off button for kYou. When off, kYou doesnt try to suggest activites
    private boolean onButton = true;

    // last activity and its minute time stamp suggested by this kYou
    private int lastSuggestedActivityTimeStamp = 0;
    private kYouActivities lastSuggestedActivity = kYouActivities.NONE;


    public kYouProfile() {

    }

    public kYouProfile(int startMinOfDayOperation, int endMinOfDayOperation, int maxNumberOfDailyInterventions, boolean onButton, int minIntervalInMin) {
        this.startMinOfDayOperation = startMinOfDayOperation;
        this.endMinOfDayOperation = endMinOfDayOperation;
        this.maxNumberOfDailyInterventions = maxNumberOfDailyInterventions;
        this.onButton = onButton;
        this.minIntervalInMin = minIntervalInMin;
    }



    // check if kYou is on and within his operating time of the day
    public boolean inOperation(int minOfTheDay){

        if (onButton == false)
            return false;

        if((minOfTheDay <= startMinOfDayOperation) || (minOfTheDay >= endMinOfDayOperation))
            return false;

        return true;
    }

    /*
    generate a potential activity suggestion. For now, this is random. In the future this can be based on some rules
     */
    public kYouActivities generateActivitySuggestion(){

        Random rand = new Random();

        int length = kYouActivities.numberOfPotentialSuggestions();

        int choice = rand.nextInt(length);

        kYouActivities activity = kYouActivities.values()[choice];

        return activity;

    }

    /* convert between a kYou suggested actvity to its home type person activity */
    HomeEventType convertCasueToAffect(kYouActivities activity) {

        if (activity == kYouActivities.SUGGESTABOOK)
            return HomeEventType.AUDIOBOOK;

        if (activity == kYouActivities.SUGGESTMUSIC)
            return HomeEventType.MUSIC;

        if (activity == kYouActivities.SUGGESTSKYPE)
            return HomeEventType.SKYPE;

        if (activity == kYouActivities.SUGGESTWALK)
            return HomeEventType.NOTINHOME;

        System.out.println("DATAGEN: ERROR - UNKNOWN kYou activity conversion");
        System.exit(1);
        return null;
    }

    /* check if kYou want to suggest an activity. based on his operational mode and last activity */
    public boolean wantToSuggestAnActivity(int timeStampInDayMin){
        if(inOperation(timeStampInDayMin)){
            int interval = timeStampInDayMin - lastSuggestedActivityTimeStamp;

            if(interval > minIntervalInMin)
                return true;
        }

        return false;
    }

    public int getMinIntervalInMin() {
        return minIntervalInMin;
    }

    public void setMinIntervalInMin(int minIntervalInMin) {
        this.minIntervalInMin = minIntervalInMin;
    }

    public int getStartMinOfDayOperation() {
        return startMinOfDayOperation;
    }

    public void setStartMinOfDayOperation(int startMinOfDayOperation) {
        this.startMinOfDayOperation = startMinOfDayOperation;
    }

    public int getEndMinOfDayOperation() {
        return endMinOfDayOperation;
    }

    public void setEndMinOfDayOperation(int endMinOfDayOperation) {
        this.endMinOfDayOperation = endMinOfDayOperation;
    }

    public int getMaxNumberOfDailyInterventions() {
        return maxNumberOfDailyInterventions;
    }

    public void setMaxNumberOfDailyInterventions(int maxNumberOfDailyInterventions) {
        this.maxNumberOfDailyInterventions = maxNumberOfDailyInterventions;
    }

    public boolean isOnButton() {
        return onButton;
    }

    public void setOnButton(boolean onButton) {
        this.onButton = onButton;
    }

    public int getLastSuggestedActivityTimeStamp() {
        return lastSuggestedActivityTimeStamp;
    }

    public void setLastSuggestedActivityTimeStamp(int lastSuggestedActivityTimeStamp) {
        this.lastSuggestedActivityTimeStamp = lastSuggestedActivityTimeStamp;
    }

    public kYouActivities getLastSuggestedActivity() {
        return lastSuggestedActivity;
    }

    public void setLastSuggestedActivity(kYouActivities lastSuggestedActivity) {
        this.lastSuggestedActivity = lastSuggestedActivity;
    }

    @Override
    public String toString() {
        return "kYouProfile{" +
                "startMinOfDayOperation=" + startMinOfDayOperation +
                ", endMinOfDayOperation=" + endMinOfDayOperation +
                ", maxNumberOfDailyInterventions=" + maxNumberOfDailyInterventions +
                '}';
    }
}
